package Viws;


import data.*;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * Cria tela para fazer cadastro, consulta, exclusão e atualização de filmes
 */


public class TelaCadastroFilme extends javax.swing.JFrame {

    /**
     * Creates new form TelaCadastroFilme
     */
    public TelaCadastroFilme() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblCadastro = new javax.swing.JLabel();
        lblNomeFilme = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNomeFilme = new javax.swing.JTextField();
        txtLancamento = new javax.swing.JTextField();
        txtCategoria = new javax.swing.JTextField();
        btnCadastrar = new javax.swing.JButton();
        Excluir = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        lblPesquisarNome = new javax.swing.JLabel();
        txtPesquisarNome = new javax.swing.JTextField();
        btnFilmes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblTitulo.setText("CENAFLIX");

        lblCadastro.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblCadastro.setText("Cadastro de Filme");

        lblNomeFilme.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblNomeFilme.setText("Nome do Filme:");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Data de Lançamento:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Categoria:");

        txtNomeFilme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeFilmeActionPerformed(evt);
            }
        });

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        Excluir.setText("Excluir");
        Excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcluirActionPerformed(evt);
            }
        });

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        lblPesquisarNome.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPesquisarNome.setText("Pesquisar Nome:");

        txtPesquisarNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarNomeActionPerformed(evt);
            }
        });

        btnFilmes.setText("Filmes Cadastrados");
        btnFilmes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilmesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(lblTitulo))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(lblCadastro))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(lblPesquisarNome)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtPesquisarNome, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnConsultar))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addContainerGap(51, Short.MAX_VALUE)
                                    .addComponent(lblNomeFilme)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtNomeFilme, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addComponent(btnFilmes)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                    .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 34, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addComponent(lblCadastro)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPesquisarNome)
                    .addComponent(txtPesquisarNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomeFilme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNomeFilme))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLancamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilmes, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
/**    botao para cadastro de novos filmes
 * 
 * @param evt 
 */
    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
   
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        
        String lancamento = txtLancamento.getText();
        
        Date data = null;

        try {
            data = new Date(formato.parse(lancamento).getTime());
        } catch (ParseException ex) {
            Logger.getLogger(TelaCadastroFilme.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        if(!validaCampos()) {
            
            Filme filme = new Filme();
            FilmesDao dao =new FilmesDao();
            boolean status;
            int resposta;
            
            filme.setNome(txtNomeFilme.getText());
            filme.setDataLancamento(data);
            filme.setCategoria(txtCategoria.getText());
            
            dao = new FilmesDao();
            
            status = dao.conectar();
            
            if(status == false){
                
                JOptionPane.showMessageDialog(null,"Erro de conexão");
                
            }else{
                
//                adicionando filme ao banco de dados
                resposta = dao.salvar(filme);
                
                if(resposta == 1){
                    
                    JOptionPane.showMessageDialog(null,"Dados incluidos com sucesso");
                   
                    
                }else if (resposta == 1062){
                    
                    JOptionPane.showMessageDialog(null,"Filme já foi cadastrado");   
                }else{
                    
                    JOptionPane.showMessageDialog(null,"Erro ao tentar inserir dados");
                }
                
                //limpando os campos
                
                txtPesquisarNome.setText("");
                txtNomeFilme.setText("");
                txtLancamento.setText("");
                txtCategoria.setText("");
                txtNomeFilme.requestFocus();
                
//            desconectando do banco de dados 
                dao.desconectar();
            }
        }                    
  
    }//GEN-LAST:event_btnCadastrarActionPerformed

    
/**    botão para exclusão de filme
 * 
 * @param evt 
 */
    private void ExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcluirActionPerformed

       String nome = txtPesquisarNome.getText();
       FilmesDao dao = new FilmesDao();
        
       boolean status = dao.conectar();
            
         if(!validaCampoNome()) {
         
            if(status == false){
                
                JOptionPane.showMessageDialog(null,"Erro de conexão");
                
            }else{ 
                
//                fazendo a exclusão do filme
                dao.excluir(nome);
                
                JOptionPane.showMessageDialog(null,"Filme excluido");
                
                
                //limpando os campos
                
                txtPesquisarNome.setText("");
                txtNomeFilme.setText("");
                txtLancamento.setText("");
                txtCategoria.setText("");
                txtNomeFilme.requestFocus();
                
            }
        
//            desconectando do banco de dados
            dao.desconectar();
            
         }
        
    }//GEN-LAST:event_ExcluirActionPerformed

    
    
/**    botão para fazer a consulta de um filme no banco de dados
 * 
 * @param evt 
 */
    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
       
         String nome = txtPesquisarNome.getText();
         SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
         FilmesDao dao = new FilmesDao();
            
         boolean status = dao.conectar();
            
         if(!validaCampoNome()) {
         
            if(status == false){
                
                JOptionPane.showMessageDialog(null,"Erro de conexão");
                
            }else{
                
                Filme filme = dao.getFilme(nome);
                
                if (filme == null) {
                    JOptionPane.showMessageDialog(this, "Filme não encontrado!");
                } 
                else {
                    
//                    convertendo a data para uma String
                    String strData = formato.format(filme.getDataLancamento());
                    
                    txtNomeFilme.setText(filme.getNome());
                    txtLancamento.setText(strData);
                    txtCategoria.setText(filme.getCategoria());
                }
            }   
            
//            desconectando do banco de dados
            dao.desconectar();
         
         }
       
    }//GEN-LAST:event_btnConsultarActionPerformed

    
/**    botão para atualizar os dados de um filme
 * 
 * @param evt 
 */
    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        
         String nome = txtPesquisarNome.getText();
         SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
         FilmesDao dao = new FilmesDao();
        
         String lancamento = txtLancamento.getText();
        
         Date data = null;
         
         boolean status = dao.conectar();
         
         if(!validaCampoNome()) {
            
             try {
                data = new Date(formato.parse(lancamento).getTime());
            
            } catch (ParseException ex) {
                Logger.getLogger(TelaCadastroFilme.class.getName()).log(Level.SEVERE, null, ex);
            }
         
            if(status == false){
                
                JOptionPane.showMessageDialog(null,"Erro de conexão");
                
            }else{
            
            Filme filme = new Filme();
                
            filme.setNome(txtNomeFilme.getText());
            filme.setDataLancamento(data);
            filme.setCategoria(txtCategoria.getText());
                
//            editando o filme
            dao.editar(filme, nome);
            
            JOptionPane.showMessageDialog(null,"Dados do filme atualizados");
            
             //limpando os campos
                
                txtPesquisarNome.setText("");
                txtNomeFilme.setText("");
                txtLancamento.setText("");
                txtCategoria.setText("");
                txtNomeFilme.requestFocus();
                
            }
            
//            desconectando do banco de dados
            dao.desconectar();
        
         }
        
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void txtNomeFilmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeFilmeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeFilmeActionPerformed

    private void txtPesquisarNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisarNomeActionPerformed

    
/**    botão para abrir tela de filmes cadastrados
 * 
 * @param evt 
 */
    private void btnFilmesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilmesActionPerformed
       
        TelaTabelaFilmes telaTabelaFilmes = new TelaTabelaFilmes();
        
        telaTabelaFilmes.setVisible(true);
        
    }//GEN-LAST:event_btnFilmesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroFilme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroFilme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroFilme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaCadastroFilme.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaCadastroFilme().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Excluir;
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnFilmes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCadastro;
    private javax.swing.JLabel lblNomeFilme;
    private javax.swing.JLabel lblPesquisarNome;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField txtCategoria;
    private javax.swing.JTextField txtLancamento;
    private javax.swing.JTextField txtNomeFilme;
    private javax.swing.JTextField txtPesquisarNome;
    // End of variables declaration//GEN-END:variables



    
    
/**    valida todos os campos de informações do filme e se os campos não forem preenchidos ou forem preenchidos incorretamente retorna false
 * 
 * @return 
 */
    private boolean validaCampos(){
        
        
     String lancamento = txtLancamento.getText();
     String categoria = txtCategoria.getText();

     boolean valido = true; 

//     valida se os campos estão preenchidos
     if(txtNomeFilme.getText().trim().isEmpty() || txtLancamento.getText().trim().isEmpty() || txtCategoria.getText().trim().isEmpty()){
        
         JOptionPane.showMessageDialog(rootPane, "Todos os campos devem ser preenchidos. ");
         
     } else{
         
         boolean strLancamento = lancamento.matches("[0-9]{2}[/][0-9]{2}[/][0-9]{4}");
         boolean strCategoria = categoria.matches("[a-zA-Z]{1,100}");
         
        //     valida se os campos estão preenchidos corretamente 
        if(strLancamento == false && strCategoria == false){
         
            JOptionPane.showMessageDialog(rootPane, """
                                                    O campo Data Lan\u00e7amento deve ser no formato (dd/MM/yyyy).
                                                    O campo Categoria deve conter apenas letras.""");
          
        } else if(strLancamento == false){
         
          JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! O campo Data Lançamento deve ser no formato (dd/MM/yyyy).");
          
        } else if(strLancamento == false){
         
          JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! O campo Categoria deve conter apenas letras.");
         
        } else{
         
         valido = false; // se naõ estiver preenchido retorna false
        }
     }
     
     return valido;  //  se estiver preenchido retorna true
  }
    
    
    
    
/**    valida campo de busca por filme e se o campo não for preenchido ou for preenchido incorretamente retorna false
 * 
 * @return 
 */
     private boolean validaCampoNome(){
        
         boolean valido = true; 

//         valida se o campo esta preenchido
         if(txtPesquisarNome.getText().trim().isEmpty()){
        
         JOptionPane.showMessageDialog(rootPane, "O campo Pesquisar Nome devem ser preenchidos. ");
        
        } else{
         
            valido = false; // se naõ estiver preenchido retorna false
     
        }
     
     return valido;  //  se estiver preenchido retorna true
     
     }

}
